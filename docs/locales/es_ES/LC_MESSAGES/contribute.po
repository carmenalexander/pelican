# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010–2023
# This file is distributed under the same license as the Pelican package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Pelican 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-03 17:37+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../contribute.rst:2
msgid "Contributing and feedback guidelines"
msgstr ""

#: ../../contribute.rst:4
msgid ""
"There are many ways to contribute to Pelican. You can improve the "
"documentation, add missing features, and fix bugs (or just report them). "
"You can also help out by reviewing and commenting on `existing issues "
"<https://github.com/getpelican/pelican/issues>`_."
msgstr ""

#: ../../contribute.rst:9
msgid ""
"Don't hesitate to fork Pelican and submit an issue or pull request on "
"GitHub. When doing so, please consider the following guidelines."
msgstr ""

#: ../../../CONTRIBUTING.rst:2
msgid "Filing issues"
msgstr ""

#: ../../../CONTRIBUTING.rst:4
msgid "Before you submit a new issue, try `asking for help`_ first."
msgstr ""

#: ../../../CONTRIBUTING.rst:5
msgid ""
"If determined to create a new issue, first search `Pelican Discussions`_ "
"and `existing issues`_ (open and closed) to see if your question has "
"already been answered previously."
msgstr ""

#: ../../../CONTRIBUTING.rst:14
msgid "How to get help"
msgstr ""

#: ../../../CONTRIBUTING.rst:16
msgid "Before you ask for help, please make sure you do the following:"
msgstr ""

#: ../../../CONTRIBUTING.rst:18
msgid ""
"Read the documentation_ thoroughly. If in a hurry, at least use the "
"search field that is provided at top-left on the documentation_ pages. "
"Make sure you read the docs for the Pelican version you are using."
msgstr ""

#: ../../../CONTRIBUTING.rst:21
msgid ""
"Use a search engine (e.g., DuckDuckGo, Google) to search for a solution "
"to your problem. Someone may have already found a solution, perhaps in "
"the form of a plugin_ or a specific combination of settings."
msgstr ""

#: ../../../CONTRIBUTING.rst:25
msgid "Try reproducing the issue in a clean environment, ensuring you are using:"
msgstr ""

#: ../../../CONTRIBUTING.rst:27
msgid "latest Pelican release (or an up-to-date Git clone of Pelican master)"
msgstr ""

#: ../../../CONTRIBUTING.rst:28
msgid "latest releases of libraries used by Pelican"
msgstr ""

#: ../../../CONTRIBUTING.rst:29
msgid "no plugins or only those related to the issue"
msgstr ""

#: ../../../CONTRIBUTING.rst:31
msgid ""
"**NOTE:** The most common sources of problems are anomalies in (1) "
"themes, (2) plugins, (3) settings files, and (4) ``make``/``invoke`` "
"automation wrappers. If you can't reproduce your problem when using the "
"following steps to generate your site, then the problem is almost "
"certainly with one of the above-listed elements (and not Pelican "
"itself)::"
msgstr ""

#: ../../../CONTRIBUTING.rst:41
msgid ""
"If you can generate your site without problems using the steps above, "
"then your problem is unlikely to be caused by Pelican itself, and "
"therefore please consider reaching out to the maintainers of the "
"plugins/theme you are using instead of raising the topic with the Pelican"
" core community."
msgstr ""

#: ../../../CONTRIBUTING.rst:46
msgid ""
"If despite the above efforts you still cannot resolve your problem, be "
"sure to include in your inquiry the following information, preferably in "
"the form of links to content uploaded to a `paste service`_, GitHub "
"repository, or other publicly-accessible location:"
msgstr ""

#: ../../../CONTRIBUTING.rst:51
msgid ""
"Describe what version of Pelican you are running (output of ``pelican "
"--version`` or the HEAD commit hash if you cloned the repo) and how "
"exactly you installed it (the full command you used, e.g. ``python -m pip"
" install pelican``)."
msgstr ""

#: ../../../CONTRIBUTING.rst:54
msgid ""
"If you are looking for a way to get some end result, prepare a detailed "
"description of what the end result should look like (preferably in the "
"form of an image or a mock-up page) and explain in detail what you have "
"done so far to achieve it."
msgstr ""

#: ../../../CONTRIBUTING.rst:58
msgid ""
"If you are trying to solve some issue, prepare a detailed description of "
"how to reproduce the problem. If the issue cannot be easily reproduced, "
"it cannot be debugged by developers or volunteers. Describe only the "
"**minimum steps** necessary to reproduce it (no extra plugins, etc.)."
msgstr ""

#: ../../../CONTRIBUTING.rst:62
msgid ""
"Upload your settings file or any other custom code that would enable "
"people to reproduce the problem or to see what you have already tried to "
"achieve the desired end result."
msgstr ""

#: ../../../CONTRIBUTING.rst:65
msgid ""
"Upload detailed and **complete** output logs and backtraces (remember to "
"add the ``--debug`` flag: ``pelican --debug content [...]``)"
msgstr ""

#: ../../../CONTRIBUTING.rst:71
msgid ""
"Once the above preparation is ready, you can post your query as a new "
"thread in `Pelican Discussions`_. Remember to include all the information"
" you prepared."
msgstr ""

#: ../../../CONTRIBUTING.rst:75
msgid "Contributing code"
msgstr ""

#: ../../../CONTRIBUTING.rst:77
msgid ""
"Before you submit a contribution, please ask whether it is desired so "
"that you don't spend a lot of time working on something that would be "
"rejected for a known reason. Consider also whether your new feature might"
" be better suited as a plugin_ — you can `ask for help`_  to make that "
"determination."
msgstr ""

#: ../../../CONTRIBUTING.rst:83
msgid "Using Git and GitHub"
msgstr ""

#: ../../../CONTRIBUTING.rst:85
msgid ""
"`Create a new git branch`_ specific to your change (as opposed to making "
"your commits in the master branch)."
msgstr ""

#: ../../../CONTRIBUTING.rst:87
msgid ""
"**Don't put multiple unrelated fixes/features in the same branch / pull "
"request.** For example, if you're working on a new feature and find a "
"bugfix that doesn't *require* your new feature, **make a new distinct "
"branch and pull request** for the bugfix."
msgstr ""

#: ../../../CONTRIBUTING.rst:91
msgid ""
"Add a ``RELEASE.md`` file in the root of the project that contains the "
"release type (major, minor, patch) and a summary of the changes that will"
" be used as the release changelog entry. For example::"
msgstr ""

#: ../../../CONTRIBUTING.rst:99
msgid ""
"Check for unnecessary whitespace via ``git diff --check`` before "
"committing."
msgstr ""

#: ../../../CONTRIBUTING.rst:100
msgid ""
"First line of your commit message should start with present-tense verb, "
"be 50 characters or less, and include the relevant issue number(s) if "
"applicable. *Example:* ``Ensure proper PLUGIN_PATH behavior. Refs #428.``"
" If the commit *completely fixes* an existing bug report, please use "
"``Fixes #585`` or ``Fix #585`` syntax (so the relevant issue is "
"automatically closed upon PR merge)."
msgstr ""

#: ../../../CONTRIBUTING.rst:105
msgid ""
"After the first line of the commit message, add a blank line and then a "
"more detailed explanation (when relevant)."
msgstr ""

#: ../../../CONTRIBUTING.rst:107
msgid ""
"`Squash your commits`_ to eliminate merge commits and ensure a clean and "
"readable commit history."
msgstr ""

#: ../../../CONTRIBUTING.rst:109
msgid ""
"If you have previously filed a GitHub issue and want to contribute code "
"that addresses that issue, **please use** ``hub pull-request`` instead of"
" using GitHub's web UI to submit the pull request. This isn't an absolute"
" requirement, but makes the maintainers' lives much easier! Specifically:"
" `install hub <https://github.com/github/hub/#installation>`_ and then "
"run `hub pull-request -i [ISSUE] <https://hub.github.com/hub-pull-"
"request.1.html>`_ to turn your GitHub issue into a pull request "
"containing your code."
msgstr ""

#: ../../../CONTRIBUTING.rst:116
msgid ""
"After you have issued a pull request, the continuous integration (CI) "
"system will run the test suite for all supported Python versions and "
"check for PEP8 compliance. If any of these checks fail, you should fix "
"them. (If tests fail on the CI system but seem to pass locally, ensure "
"that local test runs aren't skipping any tests.)"
msgstr ""

#: ../../../CONTRIBUTING.rst:123
msgid "Contribution quality standards"
msgstr ""

#: ../../../CONTRIBUTING.rst:125
msgid ""
"Adhere to `PEP8 coding standards`_. This can be eased via the "
"`pycodestyle <https://pypi.org/project/pycodestyle>`_ or `flake8 "
"<https://pypi.org/project/flake8/>`_ tools, the latter of which in "
"particular will give you some useful hints about ways in which the "
"code/formatting can be improved. We try to keep line length within the "
"79-character maximum specified by PEP8. Because that can sometimes "
"compromise readability, the hard/enforced maximum is 88 characters."
msgstr ""

#: ../../../CONTRIBUTING.rst:132
msgid ""
"Ensure your code is compatible with the `officially-supported Python "
"releases`_."
msgstr ""

#: ../../../CONTRIBUTING.rst:133
msgid ""
"Add docs and tests for your changes. Undocumented and untested features "
"will not be accepted."
msgstr ""

#: ../../../CONTRIBUTING.rst:135
msgid ""
"`Run all the tests`_ **on all versions of Python supported by Pelican** "
"to ensure nothing was accidentally broken."
msgstr ""

#: ../../../CONTRIBUTING.rst:138
msgid ""
"Check out our `Git Tips`_ page or `ask for help`_ if you need assistance "
"or have any questions about these guidelines."
msgstr ""

#: ../../contribute.rst:15
msgid "Setting up the development environment"
msgstr ""

#: ../../contribute.rst:17
msgid ""
"While there are many ways to set up one's development environment, the "
"following instructions will utilize Pip_ and Poetry_. These tools "
"facilitate managing virtual environments for separate Python projects "
"that are isolated from one another, so you can use different packages "
"(and package versions) for each."
msgstr ""

#: ../../contribute.rst:22
msgid "Please note that Python 3.7+ is required for Pelican development."
msgstr ""

#: ../../contribute.rst:24
msgid ""
"*(Optional)* If you prefer to `install Poetry <https://python-"
"poetry.org/docs/master/#installation>`_ once for use with multiple "
"projects, you can install it via::"
msgstr ""

#: ../../contribute.rst:29
msgid ""
"Point your web browser to the `Pelican repository`_ and tap the **Fork** "
"button at top-right. Then clone the source for your fork and add the "
"upstream project as a Git remote::"
msgstr ""

#: ../../contribute.rst:38
msgid ""
"While Poetry can dynamically create and manage virtual environments, "
"we're going to manually create and activate a virtual environment::"
msgstr ""

#: ../../contribute.rst:45 ../../contribute.rst:143
msgid "Install the needed dependencies and set up the project::"
msgstr ""

#: ../../contribute.rst:51
msgid "Your local environment should now be ready to go!"
msgstr ""

#: ../../contribute.rst:58
msgid "Development"
msgstr ""

#: ../../contribute.rst:60
msgid ""
"Once Pelican has been set up for local development, create a topic branch"
" for your bug fix or feature::"
msgstr ""

#: ../../contribute.rst:65
msgid ""
"Now you can make changes to Pelican, its documentation, and/or other "
"aspects of the project."
msgstr ""

#: ../../contribute.rst:69
msgid "Running the test suite"
msgstr ""

#: ../../contribute.rst:71
msgid ""
"Each time you make changes to Pelican, there are two things to do "
"regarding tests: check that the existing tests pass, and add tests for "
"any new features or bug fixes. The tests are located in "
"``pelican/tests``, and you can run them via::"
msgstr ""

#: ../../contribute.rst:78
msgid ""
"In addition to running the test suite, it is important to also ensure "
"that any lines you changed conform to code style guidelines. You can "
"check that via::"
msgstr ""

#: ../../contribute.rst:83
msgid ""
"If code style violations are found in lines you changed, correct those "
"lines and re-run the above lint command until they have all been fixed. "
"You do not need to address style violations, if any, for code lines you "
"did not touch."
msgstr ""

#: ../../contribute.rst:87
msgid ""
"After making your changes and running the tests, you may see a test "
"failure mentioning that \"some generated files differ from the expected "
"functional tests output.\" If you have made changes that affect the HTML "
"output generated by Pelican, and the changes to that output are expected "
"and deemed correct given the nature of your changes, then you should "
"update the output used by the functional tests. To do so, **make sure you"
" have both** ``en_EN.utf8`` **and** ``fr_FR.utf8`` **locales installed**,"
" and then run the following command::"
msgstr ""

#: ../../contribute.rst:97
msgid ""
"You may also find that some tests are skipped because some dependency "
"(e.g., Pandoc) is not installed. This does not automatically mean that "
"these tests have passed; you should at least verify that any skipped "
"tests are not affected by your changes."
msgstr ""

#: ../../contribute.rst:102
msgid ""
"You should run the test suite under each of the supported versions of "
"Python. This is best done by creating a separate Python environment for "
"each version. Tox_ is a useful tool to automate running tests inside "
"``virtualenv`` environments."
msgstr ""

#: ../../contribute.rst:110
msgid "Building the docs"
msgstr ""

#: ../../contribute.rst:112
msgid ""
"If you make changes to the documentation, you should build and inspect "
"your changes before committing them::"
msgstr ""

#: ../../contribute.rst:117
msgid ""
"Open http://localhost:8000 in your browser to review the documentation. "
"While the above task is running, any changes you make and save to the "
"documentation should automatically appear in the browser, as it live-"
"reloads when it detects changes to the documentation source files."
msgstr ""

#: ../../contribute.rst:123
msgid "Plugin development"
msgstr ""

#: ../../contribute.rst:125
msgid ""
"To create a *new* Pelican plugin, please refer to the `plugin template`_ "
"repository for detailed instructions."
msgstr ""

#: ../../contribute.rst:128
msgid ""
"If you want to contribute to an *existing* Pelican plugin, follow the "
"steps above to set up Pelican for local development, and then create a "
"directory to store cloned plugin repositories::"
msgstr ""

#: ../../contribute.rst:134
msgid ""
"Assuming you wanted to contribute to the Simple Footnotes plugin, you "
"would first browse to the `Simple Footnotes`_ repository on GitHub and "
"tap the **Fork** button at top-right. Then clone the source for your fork"
" and add the upstream project as a Git remote::"
msgstr ""

#: ../../contribute.rst:147
msgid "Create a topic branch for your plugin bug fix or feature::"
msgstr ""

#: ../../contribute.rst:151
msgid ""
"After writing new tests for your plugin changes, run the plugin test "
"suite and check for code style compliance via::"
msgstr ""

#: ../../contribute.rst:157
msgid ""
"If style violations are found, many of them can be addressed "
"automatically via::"
msgstr ""

#: ../../contribute.rst:162
msgid ""
"If style violations are found even after running the above auto-"
"formatters, you will need to make additional manual changes until "
"``invoke lint`` no longer reports any code style violations."
msgstr ""

#: ../../contribute.rst:170
msgid "Submitting your changes"
msgstr ""

#: ../../contribute.rst:172
msgid ""
"Assuming linting validation and tests pass, add a ``RELEASE.md`` file in "
"the root of the project that contains the release type (major, minor, "
"patch) and a summary of the changes that will be used as the release "
"changelog entry. For example::"
msgstr ""

#: ../../contribute.rst:181
msgid "Commit your changes and push your topic branch::"
msgstr ""

#: ../../contribute.rst:187
msgid ""
"Finally, browse to your repository fork on GitHub and submit a pull "
"request."
msgstr ""

#: ../../contribute.rst:191
msgid "Logging tips"
msgstr ""

#: ../../contribute.rst:193
msgid "Try to use logging with appropriate levels."
msgstr ""

#: ../../contribute.rst:195
msgid "For logging messages that are not repeated, use the usual Python way::"
msgstr ""

#: ../../contribute.rst:204
#, python-format
msgid ""
"Do not format log messages yourself. Use ``%s`` formatting in messages "
"and pass arguments to logger. This is important, because the Pelican "
"logger will preprocess some arguments, such as exceptions."
msgstr ""

#: ../../contribute.rst:209
msgid "Limiting extraneous log messages"
msgstr ""

#: ../../contribute.rst:211
msgid ""
"If the log message can occur several times, you may want to limit the log"
" to prevent flooding. In order to do that, use the ``extra`` keyword "
"argument for the logging message in the following format::"
msgstr ""

#: ../../contribute.rst:218
msgid ""
"Optionally, you can also set ``'limit_args'`` as a tuple of arguments in "
"``extra`` dict if your generic message needs formatting."
msgstr ""

#: ../../contribute.rst:221
msgid ""
"Limit is set to ``5``, i.e, first four logs with the same ``'limit_msg'``"
" are outputted normally but the fifth one will be logged using "
"``'limit_msg'`` (and ``'limit_args'`` if present). After the fifth, "
"corresponding log messages will be ignored."
msgstr ""

#: ../../contribute.rst:226
msgid ""
"For example, if you want to log missing resources, use the following "
"code::"
msgstr ""

#: ../../contribute.rst:234
msgid "The log messages will be displayed as follows::"
msgstr ""

#: ../../contribute.rst:244
msgid "Outputting traceback in the logs"
msgstr ""

#: ../../contribute.rst:246
msgid ""
"If you're logging inside an ``except`` block, you may want to provide the"
" traceback information as well. You can do that by setting ``exc_info`` "
"keyword argument to ``True`` during logging. However, doing so by default"
" can be undesired because tracebacks are long and can be confusing to "
"regular users. Try to limit them to ``--debug`` mode like the following::"
msgstr ""

