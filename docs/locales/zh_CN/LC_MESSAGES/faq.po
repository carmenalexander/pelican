# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010â€“2023
# This file is distributed under the same license as the Pelican package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Pelican 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-29 21:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../faq.rst:2
msgid "Frequently Asked Questions (FAQ)"
msgstr ""

#: ../../faq.rst:4
msgid "Here are some frequently asked questions about Pelican."
msgstr ""

#: ../../faq.rst:7
msgid "What's the best way to communicate a problem, question, or suggestion?"
msgstr ""

#: ../../faq.rst:9
msgid "Please read our :doc:`feedback guidelines <contribute>`."
msgstr ""

#: ../../faq.rst:12
msgid "How can I help?"
msgstr ""

#: ../../faq.rst:14
msgid ""
"There are several ways to help out. First, you can communicate any "
"Pelican suggestions or problems you might have via `Pelican Discussions "
"<https://github.com/getpelican/pelican/discussions>`_. Please first check"
" the existing list of discussions and issues (both open and closed) in "
"order to avoid submitting topics that have already been covered before."
msgstr ""

#: ../../faq.rst:20
msgid ""
"If you want to contribute, please fork `the git repository "
"<https://github.com/getpelican/pelican/>`_, create a new feature branch, "
"make your changes, and issue a pull request. Someone will review your "
"changes as soon as possible. Please refer to the :doc:`How to Contribute "
"<contribute>` section for more details."
msgstr ""

#: ../../faq.rst:26
msgid ""
"You can also contribute by creating themes and improving the "
"documentation."
msgstr ""

#: ../../faq.rst:29
msgid "Is the Pelican settings file mandatory?"
msgstr ""

#: ../../faq.rst:31
msgid ""
"Configuration files are optional and are just an easy way to configure "
"Pelican. For basic operations, it's possible to specify options while "
"invoking Pelican via the command line. See ``pelican --help`` for more "
"information."
msgstr ""

#: ../../faq.rst:36
msgid "Changes to the settings file take no effect"
msgstr ""

#: ../../faq.rst:38
msgid ""
"When experimenting with different settings (especially the metadata ones)"
" caching may interfere and the changes may not be visible. In such cases,"
" ensure that caching is disabled via ``LOAD_CONTENT_CACHE = False`` or "
"use the ``--ignore-cache`` command-line switch."
msgstr ""

#: ../../faq.rst:44
msgid "I'm creating my own theme. How do I use Pygments for syntax highlighting?"
msgstr ""

#: ../../faq.rst:46
msgid ""
"Pygments adds some classes to the generated content. These classes are "
"used by themes to style code syntax highlighting via CSS. Specifically, "
"you can customize the appearance of your syntax highlighting via the "
"``.highlight pre`` class in your theme's CSS file. To see how various "
"styles can be used to render Django code, for example, use the style "
"selector drop-down at top-right on the `Pygments project demo site "
"<https://pygments.org/demo/>`_."
msgstr ""

#: ../../faq.rst:53
msgid ""
"You can use the following example commands to generate a starting CSS "
"file from a Pygments built-in style (in this case, \"monokai\") and then "
"copy the generated CSS file to your new theme::"
msgstr ""

#: ../../faq.rst:60
msgid "Don't forget to import your ``pygment.css`` file from your main CSS file."
msgstr ""

#: ../../faq.rst:63
msgid "How do I create my own theme?"
msgstr ""

#: ../../faq.rst:65
msgid "Please refer to :ref:`theming-pelican`."
msgstr ""

#: ../../faq.rst:68
msgid "I want to use Markdown, but I got an error."
msgstr ""

#: ../../faq.rst:70
msgid ""
"If you try to generate Markdown content without first installing the "
"Markdown library, may see a message that says ``No valid files found in "
"content``. Markdown is not a hard dependency for Pelican, so if you have "
"content in Markdown format, you will need to explicitly install the "
"Markdown library. You can do so by typing the following command, "
"prepending ``sudo`` if permissions require it::"
msgstr ""

#: ../../faq.rst:80
msgid "Can I use arbitrary metadata in my templates?"
msgstr ""

#: ../../faq.rst:82
msgid ""
"Yes. For example, to include a modified date in a Markdown post, one "
"could include the following at the top of the article::"
msgstr ""

#: ../../faq.rst:87
msgid ""
"For reStructuredText, this metadata should of course be prefixed with a "
"colon::"
msgstr ""

#: ../../faq.rst:91
msgid ""
"This metadata can then be accessed in templates such as ``article.html`` "
"via::"
msgstr ""

#: ../../faq.rst:97
msgid ""
"If you want to include metadata in templates outside the article context "
"(e.g., ``base.html``), the ``if`` statement should instead be::"
msgstr ""

#: ../../faq.rst:103
msgid "How do I assign custom templates on a per-page basis?"
msgstr ""

#: ../../faq.rst:105
msgid ""
"It's as simple as adding an extra line of metadata to any page or article"
" that you want to have its own template. For example, this is how it "
"would be handled for content in reST format::"
msgstr ""

#: ../../faq.rst:111
msgid "For content in Markdown format::"
msgstr ""

#: ../../faq.rst:115
msgid ""
"Then just make sure your theme contains the relevant template file (e.g. "
"``template_name.html``)."
msgstr ""

#: ../../faq.rst:119
msgid "How can I override the generated URL of a specific page or article?"
msgstr ""

#: ../../faq.rst:121
msgid ""
"Include ``url`` and ``save_as`` metadata in any pages or articles that "
"you want to override the generated URL. Here is an example page in reST "
"format::"
msgstr ""

#: ../../faq.rst:130
msgid ""
"With this metadata, the page will be written to "
"``override/url/index.html`` and Pelican will use url ``override/url/`` to"
" link to this page."
msgstr ""

#: ../../faq.rst:134
msgid "How can I use a static page as my home page?"
msgstr ""

#: ../../faq.rst:136
msgid ""
"The override feature mentioned above can be used to specify a static page"
" as your home page. The following Markdown example could be stored in "
"``content/pages/home.md``::"
msgstr ""

#: ../../faq.rst:146
msgid ""
"If the original blog index is still wanted, it can then be saved in a "
"different location by setting ``INDEX_SAVE_AS = 'blog_index.html'`` for "
"the ``'index'`` direct template."
msgstr ""

#: ../../faq.rst:151
msgid "What if I want to disable feed generation?"
msgstr ""

#: ../../faq.rst:153
msgid ""
"To disable feed generation, all feed settings should be set to ``None``. "
"All but three feed settings already default to ``None``, so if you want "
"to disable all feed generation, you only need to specify the following "
"settings::"
msgstr ""

#: ../../faq.rst:163
msgid ""
"The word ``None`` should not be surrounded by quotes. Please note that "
"``None`` and ``''`` are not the same thing."
msgstr ""

#: ../../faq.rst:167
msgid ""
"I'm getting a warning about feeds generated without SITEURL being set "
"properly"
msgstr ""

#: ../../faq.rst:169
msgid ""
"`RSS and Atom feeds require all URL links to be absolute "
"<https://validator.w3.org/feed/docs/rss2.html#comments>`_. In order to "
"properly generate links in Pelican you will need to set ``SITEURL`` to "
"the full path of your site."
msgstr ""

#: ../../faq.rst:174
msgid ""
"Feeds are still generated when this warning is displayed, but links "
"within may be malformed and thus the feed may not validate."
msgstr ""

#: ../../faq.rst:178
msgid "Can I force Atom feeds to show only summaries instead of article content?"
msgstr ""

#: ../../faq.rst:180
msgid ""
"Instead of having to open a separate browser window to read articles, the"
" overwhelming majority of folks who use feed readers prefer to read "
"content within the feed reader itself. Mainly for that reason, Pelican "
"does not support restricting Atom feeds to only contain summaries. Unlike"
" Atom feeds, the RSS feed specification does not include a separate "
"``content`` field, so by default Pelican publishes RSS feeds that only "
"contain summaries (but can optionally be set to instead publish full "
"content RSS feeds). So the default feed generation behavior provides "
"users with a choice: subscribe to Atom feeds for full content or to RSS "
"feeds for just the summaries."
msgstr ""

#: ../../faq.rst:191
msgid "Is Pelican only suitable for blogs?"
msgstr ""

#: ../../faq.rst:193
msgid ""
"No. Pelican can be easily configured to create and maintain any type of "
"static site. This may require a little customization of your theme and "
"Pelican configuration. For example, if you are building a launch site for"
" your product and do not need tags on your site, you could remove the "
"relevant HTML code from your theme. You can also disable generation of "
"tag-related pages via::"
msgstr ""

#: ../../faq.rst:203
msgid ""
"Why does Pelican always write all HTML files even with content caching "
"enabled?"
msgstr ""

#: ../../faq.rst:205
msgid ""
"In order to reliably determine whether the HTML output is different "
"before writing it, a large part of the generation environment including "
"the template contexts, imported plugins, etc. would have to be saved and "
"compared, at least in the form of a hash (which would require special "
"handling of unhashable types), because of all the possible combinations "
"of plugins, pagination, etc. which may change in many different ways. "
"This would require a lot more processing time and memory and storage "
"space. Simply writing the files each time is a lot faster and a lot more "
"reliable."
msgstr ""

#: ../../faq.rst:214
msgid ""
"However, this means that the modification time of the files changes every"
" time, so a ``rsync`` based upload will transfer them even if their "
"content hasn't changed. A simple solution is to make ``rsync`` use the "
"``--checksum`` option, which will make it compare the file checksums in a"
" much faster way than Pelican would."
msgstr ""

#: ../../faq.rst:220
msgid ""
"When only several specific output files are of interest (e.g. when "
"working on some specific page or the theme templates), the "
"``WRITE_SELECTED`` option may help, see "
":ref:`writing_only_selected_content`."
msgstr ""

#: ../../faq.rst:225
msgid "How to process only a subset of all articles?"
msgstr ""

#: ../../faq.rst:227
msgid ""
"It is often useful to process only e.g. 10 articles for debugging "
"purposes. This can be achieved by explicitly specifying only the "
"filenames of those articles in ``ARTICLE_PATHS``. A list of such "
"filenames could be found using a command similar to ``cd content; find "
"-name '*.md' | head -n 10``."
msgstr ""

#: ../../faq.rst:233
msgid "My tag-cloud is missing/broken since I upgraded Pelican"
msgstr ""

#: ../../faq.rst:235
msgid ""
"In an ongoing effort to streamline Pelican, tag cloud generation has been"
" moved out of Pelican core and into a separate `plugin "
"<https://github.com/pelican-plugins/tag-cloud>`_. See the :ref:`plugins` "
"documentation for further information about the Pelican plugin system."
msgstr ""

#: ../../faq.rst:241
msgid "Since I upgraded Pelican my pages are no longer rendered"
msgstr ""

#: ../../faq.rst:243
msgid ""
"Pages were available to themes as lowercase ``pages`` and uppercase "
"``PAGES``. To bring this inline with the :ref:`templates-variables` "
"section, ``PAGES`` has been removed. This is quickly resolved by updating"
" your theme to iterate over ``pages`` instead of ``PAGES``. Just "
"replace::"
msgstr ""

#: ../../faq.rst:250
msgid "with something like::"
msgstr ""

#: ../../faq.rst:255
msgid "How can I stop Pelican from trying to parse my static files as content?"
msgstr ""

#: ../../faq.rst:257
msgid ""
"Pelican's article and page generators run before it's static generator. "
"That means if you use a setup similar to the default configuration, where"
" a static source directory is defined inside a ``*_PATHS`` setting, all "
"files that have a valid content file ending (``.html``, ``.rst``, "
"``.md``, ...) will be treated as articles or pages before they get "
"treated as static files."
msgstr ""

#: ../../faq.rst:263
msgid ""
"To circumvent this issue either use the appropriate ``*_EXCLUDES`` "
"setting or disable the offending reader via ``READERS`` if you don't need"
" it."
msgstr ""

#: ../../faq.rst:267
msgid "Why is [arbitrary Markdown syntax] not supported?"
msgstr ""

#: ../../faq.rst:269
msgid ""
"Pelican does not directly handle Markdown processing and instead "
"delegates that task to the Python-Markdown_ project, the core of which "
"purposefully follows the original Markdown syntax rules and not the "
"myriad Markdown \"flavors\" that have subsequently propagated. That said,"
" Python-Markdown_ is quite modular, and the syntax you are looking for "
"may be provided by one of the many available `Markdown Extensions`_. "
"Alternatively, some folks have created Pelican plugins that support "
"Markdown variants, so that may be your best choice if there is a "
"particular variant you want to use when writing your content."
msgstr ""

