# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010â€“2023
# This file is distributed under the same license as the Pelican package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Pelican 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-29 21:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../tips.rst:2
msgid "Tips"
msgstr ""

#: ../../tips.rst:4
msgid "Here are some tips about Pelican that you might find useful."
msgstr ""

#: ../../tips.rst:7 ../../tips.rst:114
msgid "Custom 404 Pages"
msgstr ""

#: ../../tips.rst:9
msgid ""
"When a browser requests a resource that the web server cannot find, the "
"web server usually displays a generic \"File not found\" (404) error page"
" that can be stark and unsightly. One way to provide an error page that "
"matches the theme of your site is to create a custom 404 page (*not* an "
"article), such as this Markdown-formatted example stored in "
"``content/pages/404.md``::"
msgstr ""

#: ../../tips.rst:22
msgid ""
"The next step is to configure your web server to display this custom page"
" instead of its default 404 page. For Nginx, add the following to your "
"configuration file's ``location`` block::"
msgstr ""

#: ../../tips.rst:28
msgid "For Apache::"
msgstr ""

#: ../../tips.rst:32
msgid ""
"For Amazon S3, first navigate to the ``Static Site Hosting`` menu in the "
"bucket settings on your AWS console. From there::"
msgstr ""

#: ../../tips.rst:38
msgid "Publishing to GitHub"
msgstr ""

#: ../../tips.rst:40
msgid ""
"`GitHub Pages <https://help.github.com/categories/20/articles>`_ offer an"
" easy and convenient way to publish Pelican sites. There are `two types "
"of GitHub Pages <https://help.github.com/articles/user-organization-and-"
"project-pages>`_: *Project Pages* and *User Pages*. Pelican sites can be "
"published as both Project Pages and User Pages."
msgstr ""

#: ../../tips.rst:47
msgid "Project Pages"
msgstr ""

#: ../../tips.rst:49
msgid ""
"To publish a Pelican site as a Project Page you need to *push* the "
"content of the ``output`` dir generated by Pelican to a repository's "
"``gh-pages`` branch on GitHub."
msgstr ""

#: ../../tips.rst:53
msgid ""
"The excellent `ghp-import <https://github.com/davisp/ghp-import>`_, which"
" can be installed with ``pip``, makes this process really easy."
msgstr ""

#: ../../tips.rst:56
msgid ""
"For example, if the source of your Pelican site is contained in a GitHub "
"repository, and if you want to publish that Pelican site in the form of "
"Project Pages to this repository, you can then use the following::"
msgstr ""

#: ../../tips.rst:64
msgid ""
"The ``ghp-import output`` command updates the local ``gh-pages`` branch "
"with the content of the ``output`` directory (creating the branch if it "
"doesn't already exist). The ``git push origin gh-pages`` command updates "
"the remote ``gh-pages`` branch, effectively publishing the Pelican site."
msgstr ""

#: ../../tips.rst:71
msgid ""
"The ``github`` target of the Makefile (and the ``gh_pages`` task of "
"``tasks.py``) created by the ``pelican-quickstart`` command publishes the"
" Pelican site as Project Pages, as described above."
msgstr ""

#: ../../tips.rst:76
msgid "User Pages"
msgstr ""

#: ../../tips.rst:78
msgid ""
"To publish a Pelican site in the form of User Pages, you need to *push* "
"the content of the ``output`` dir generated by Pelican to the ``master`` "
"branch of your ``<username>.github.io`` repository on GitHub."
msgstr ""

#: ../../tips.rst:82
msgid "Again, you can take advantage of ``ghp-import``::"
msgstr ""

#: ../../tips.rst:88
msgid ""
"The ``git push`` command pushes the local ``gh-pages`` branch (freshly "
"updated by the ``ghp-import`` command) to the ``elemoine.github.io`` "
"repository's ``master`` branch on GitHub."
msgstr ""

#: ../../tips.rst:94
msgid ""
"To publish your Pelican site as User Pages, feel free to adjust the "
"``github`` target of the Makefile."
msgstr ""

#: ../../tips.rst:97
msgid ""
"Another option for publishing to User Pages is to generate the output "
"files in the root directory of the project."
msgstr ""

#: ../../tips.rst:100
msgid ""
"For example, your main project folder is ``<username>.github.io`` and you"
" can create the Pelican project in a subdirectory called ``Pelican``. "
"Then from inside the ``Pelican`` folder you can run::"
msgstr ""

#: ../../tips.rst:106
msgid ""
"Now you can push the whole project ``<username>.github.io`` to the master"
" branch of your GitHub repository::"
msgstr ""

#: ../../tips.rst:111
msgid "(assuming origin is set to your remote repository)."
msgstr ""

#: ../../tips.rst:116
msgid ""
"GitHub Pages will display the custom 404 page described above, as noted "
"in the relevant `GitHub docs "
"<https://help.github.com/articles/custom-404-pages/>`_."
msgstr ""

#: ../../tips.rst:120
msgid "Update your site on each commit"
msgstr ""

#: ../../tips.rst:122
msgid ""
"To automatically update your Pelican site on each commit, you can create "
"a post-commit hook. For example, you can add the following to "
"``.git/hooks/post-commit``::"
msgstr ""

#: ../../tips.rst:129
msgid "Copy static files to the root of your site"
msgstr ""

#: ../../tips.rst:131
msgid ""
"To use a `custom domain <https://help.github.com/articles/setting-up-a"
"-custom-domain-with-pages>`_ with GitHub Pages, you need to put the "
"domain of your site (e.g., ``blog.example.com``) inside a ``CNAME`` file "
"at the root of your site. To do this, create the ``content/extra/`` "
"directory and add a ``CNAME`` file to it. Then use the ``STATIC_PATHS`` "
"setting to tell Pelican to copy this file to your output directory. For "
"example::"
msgstr ""

#: ../../tips.rst:142
msgid "Note: use forward slashes, ``/``, even on Windows."
msgstr ""

#: ../../tips.rst:144
msgid ""
"You can also use the ``EXTRA_PATH_METADATA`` mechanism to place a "
"``favicon.ico`` or ``robots.txt`` at the root of any site."
msgstr ""

#: ../../tips.rst:148
msgid "How to add YouTube or Vimeo Videos"
msgstr ""

#: ../../tips.rst:150
msgid ""
"The easiest way is to paste the embed code of the video from these sites "
"directly into your source content."
msgstr ""

#: ../../tips.rst:153
msgid ""
"Alternatively, you can also use Pelican plugins like ``liquid_tags``, "
"``pelican_youtube``, or ``pelican_vimeo`` to embed videos in your "
"content."
msgstr ""

#: ../../tips.rst:156
msgid ""
"Moreover, markup languages like reST and Markdown have plugins that let "
"you embed videos in the markup. You can use `reST video directive "
"<https://gist.github.com/dbrgn/2922648>`_ for reST or `mdx_video plugin "
"<https://github.com/italomaia/mdx-video>`_ for Markdown."
msgstr ""

#: ../../tips.rst:163
msgid "Develop Locally Using SSL"
msgstr ""

#: ../../tips.rst:165
msgid "Here's how you can set up your local pelican server to support SSL."
msgstr ""

#: ../../tips.rst:167
msgid ""
"First, create a self-signed certificate and key using ``openssl`` (this "
"creates ``cert.pem`` and ``key.pem``)::"
msgstr ""

#: ../../tips.rst:171
msgid ""
"And use this command to launch the server (the server starts within your "
"``output`` directory)::"
msgstr ""

#: ../../tips.rst:175
msgid "If you are using ``develop-server.sh``,  add this to the top::"
msgstr ""

#: ../../tips.rst:180
msgid "and modify the ``pelican.server`` line as follows::"
msgstr ""

