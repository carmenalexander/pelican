# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010–2023
# This file is distributed under the same license as the Pelican package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Pelican 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-19 20:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.0\n"

#: ../../tips.rst:2
msgid "Tips"
msgstr ""

#: ../../tips.rst:4
msgid "Here are some tips about Pelican that you might find useful."
msgstr ""

#: ../../tips.rst:7 ../../tips.rst:208
msgid "Custom 404 Pages"
msgstr ""

#: ../../tips.rst:9
msgid ""
"When a browser requests a resource that the web server cannot find, the "
"web server usually displays a generic \"File not found\" (404) error page"
" that can be stark and unsightly. One way to provide an error page that "
"matches the theme of your site is to create a custom 404 page (*not* an "
"article), such as this Markdown-formatted example stored in "
"``content/pages/404.md``::"
msgstr ""

#: ../../tips.rst:22
msgid ""
"The next step is to configure your web server to display this custom page"
" instead of its default 404 page. For Nginx, add the following to your "
"configuration file's ``location`` block::"
msgstr ""

#: ../../tips.rst:28
msgid "For Apache::"
msgstr ""

#: ../../tips.rst:32
msgid ""
"For Amazon S3, first navigate to the ``Static Site Hosting`` menu in the "
"bucket settings on your AWS console. From there::"
msgstr ""

#: ../../tips.rst:38
msgid "Publishing to GitHub Pages"
msgstr ""

#: ../../tips.rst:40
msgid ""
"If you use `GitHub <https://github.com/>`_ for your Pelican site you can "
"publish your site to `GitHub Pages <https://pages.github.com/>`_ for "
"free. Your site will be published to ``https://<username>.github.io`` if "
"it's a user or organization site or to "
"``https://<username>.github.io/<repository>`` if it's a project site. "
"It's also possible to `use a custom domain with GitHub Pages "
"<https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-"
"github-pages-site>`_."
msgstr ""

#: ../../tips.rst:46
msgid ""
"There are `two ways to publish a site to GitHub Pages "
"<https://docs.github.com/en/pages/getting-started-with-github-"
"pages/configuring-a-publishing-source-for-your-github-pages-site>`_:"
msgstr ""

#: ../../tips.rst:48
msgid ""
"**Publishing from a branch:** run ``pelican`` locally and push the output"
" directory to a special branch of your GitHub repo. GitHub will then "
"publish the contents of this branch to your GitHub Pages site."
msgstr ""

#: ../../tips.rst:51
msgid ""
"**Publishing with a custom GitHub Actions workflow:** just push the "
"source files of your Pelican site to your GitHub repo's default branch "
"and have a custom GitHub Actions workflow run ``pelican`` for you to "
"generate the output directory and publish it to your GitHub Pages site.  "
"This way you don't need to run ``pelican`` locally. You can even edit "
"your site's source files using GitHub's web interface and any changes "
"that you commit will be published."
msgstr ""

#: ../../tips.rst:60
msgid "Publishing a Project Site to GitHub Pages from a Branch"
msgstr ""

#: ../../tips.rst:62
msgid ""
"To publish a Pelican site as a Project Page you need to *push* the "
"content of the ``output`` dir generated by Pelican to a repository's "
"``gh-pages`` branch on GitHub."
msgstr ""

#: ../../tips.rst:66
msgid ""
"The excellent `ghp-import <https://github.com/davisp/ghp-import>`_, which"
" can be installed with ``pip``, makes this process really easy."
msgstr ""

#: ../../tips.rst:69
msgid ""
"For example, if the source of your Pelican site is contained in a GitHub "
"repository, and if you want to publish that Pelican site in the form of "
"Project Pages to this repository, you can then use the following::"
msgstr ""

#: ../../tips.rst:77
msgid ""
"The ``ghp-import output`` command updates the local ``gh-pages`` branch "
"with the content of the ``output`` directory (creating the branch if it "
"doesn't already exist). The ``git push origin gh-pages`` command updates "
"the remote ``gh-pages`` branch, effectively publishing the Pelican site."
msgstr ""

#: ../../tips.rst:84
msgid ""
"The ``github`` target of the Makefile (and the ``gh_pages`` task of "
"``tasks.py``) created by the ``pelican-quickstart`` command publishes the"
" Pelican site as Project Pages, as described above."
msgstr ""

#: ../../tips.rst:89
msgid "Publishing a User Site to GitHub Pages from a Branch"
msgstr ""

#: ../../tips.rst:91
msgid ""
"To publish a Pelican site in the form of User Pages, you need to *push* "
"the content of the ``output`` dir generated by Pelican to the ``master`` "
"branch of your ``<username>.github.io`` repository on GitHub."
msgstr ""

#: ../../tips.rst:95
msgid "Again, you can take advantage of ``ghp-import``::"
msgstr ""

#: ../../tips.rst:101
msgid ""
"The ``git push`` command pushes the local ``gh-pages`` branch (freshly "
"updated by the ``ghp-import`` command) to the ``elemoine.github.io`` "
"repository's ``master`` branch on GitHub."
msgstr ""

#: ../../tips.rst:107
msgid ""
"To publish your Pelican site as User Pages, feel free to adjust the "
"``github`` target of the Makefile."
msgstr ""

#: ../../tips.rst:110
msgid ""
"Another option for publishing to User Pages is to generate the output "
"files in the root directory of the project."
msgstr ""

#: ../../tips.rst:113
msgid ""
"For example, your main project folder is ``<username>.github.io`` and you"
" can create the Pelican project in a subdirectory called ``Pelican``. "
"Then from inside the ``Pelican`` folder you can run::"
msgstr ""

#: ../../tips.rst:119
msgid ""
"Now you can push the whole project ``<username>.github.io`` to the master"
" branch of your GitHub repository::"
msgstr ""

#: ../../tips.rst:124
msgid "(assuming origin is set to your remote repository)."
msgstr ""

#: ../../tips.rst:127
msgid "Publishing to GitHub Pages Using a Custom GitHub Actions Workflow"
msgstr ""

#: ../../tips.rst:129
msgid ""
"Pelican comes with a `custom workflow "
"<https://github.com/getpelican/pelican/blob/master/.github/workflows/github_pages.yml>`_"
" for publishing a Pelican site. To use it:"
msgstr ""

#: ../../tips.rst:132
msgid ""
"Enable GitHub Pages in your repo: go to **Settings → Pages** and choose "
"**GitHub Actions** for the **Source** setting."
msgstr ""

#: ../../tips.rst:135
msgid ""
"Commit a ``.github/workflows/pelican.yml`` file to your repo with these "
"contents:"
msgstr ""

#: ../../tips.rst:154
msgid ""
"Go to the **Actions** tab in your repo "
"(``https://github.com/<username>/<repository>/actions``) and you should "
"see a **Deploy to GitHub Pages** action running."
msgstr ""

#: ../../tips.rst:158
msgid ""
"Once the action completes you should see your Pelican site deployed at "
"your repo's GitHub Pages URL: ``https://<username>.github.io`` for a user"
" or organization site or ``https://<username>.github.io/<repository>>`` "
"for a project site."
msgstr ""

#: ../../tips.rst:163
msgid "Notes:"
msgstr ""

#: ../../tips.rst:165
msgid ""
"You don't need to set ``SITEURL`` in your Pelican settings: the workflow "
"will set it for you"
msgstr ""

#: ../../tips.rst:168
msgid ""
"You don't need to commit your ``--output`` / ``OUTPUT_PATH`` directory "
"(``output/``) to git: the workflow will run ``pelican`` to build the "
"output directory for you on GitHub Actions"
msgstr ""

#: ../../tips.rst:172
msgid ""
"See `GitHub's docs about reusable workflows "
"<https://docs.github.com/en/actions/using-workflows/reusing-workflows>`_ "
"for more information."
msgstr ""

#: ../../tips.rst:175
msgid ""
"A number of optional inputs can be added to the ``with:`` block when "
"calling the workflow:"
msgstr ""

#: ../../tips.rst:179
msgid "Name"
msgstr ""

#: ../../tips.rst:179
msgid "Required"
msgstr ""

#: ../../tips.rst:179
msgid "Description"
msgstr ""

#: ../../tips.rst:179
msgid "Type"
msgstr ""

#: ../../tips.rst:179
msgid "Default"
msgstr ""

#: ../../tips.rst:181
msgid "settings"
msgstr ""

#: ../../tips.rst:181
msgid "Yes"
msgstr ""

#: ../../tips.rst:181
msgid ""
"The path to your Pelican settings file (``pelican``'s ``--settings`` "
"option), for example: ``\"publishconf.py\"``"
msgstr ""

#: ../../tips.rst:181 ../../tips.rst:186 ../../tips.rst:193
msgid "string"
msgstr ""

#: ../../tips.rst:186
msgid "requirements"
msgstr ""

#: ../../tips.rst:186 ../../tips.rst:193
msgid "No"
msgstr ""

#: ../../tips.rst:186
msgid ""
"The Python requirements to install, for example to enable markdown and "
"typogrify use: ``\"pelican[markdown] typogrify\"`` or if you have a "
"requirements file: ``\"-r requirements.txt\"``"
msgstr ""

#: ../../tips.rst:186
msgid "``\"pelican\"``"
msgstr ""

#: ../../tips.rst:193
msgid "output-path"
msgstr ""

#: ../../tips.rst:193
msgid "Where to output the generated files (``pelican``'s ``--output`` option)"
msgstr ""

#: ../../tips.rst:193
msgid "``\"output/\"``"
msgstr ""

#: ../../tips.rst:198
msgid "For example:"
msgstr ""

#: ../../tips.rst:210
msgid ""
"GitHub Pages will display the custom 404 page described above, as noted "
"in the relevant `GitHub docs "
"<https://help.github.com/articles/custom-404-pages/>`_."
msgstr ""

#: ../../tips.rst:214
msgid "Update your site on each commit"
msgstr ""

#: ../../tips.rst:216
msgid ""
"To automatically update your Pelican site on each commit, you can create "
"a post-commit hook. For example, you can add the following to "
"``.git/hooks/post-commit``::"
msgstr ""

#: ../../tips.rst:223
msgid "Copy static files to the root of your site"
msgstr ""

#: ../../tips.rst:225
msgid ""
"To use a `custom domain <https://help.github.com/articles/setting-up-a"
"-custom-domain-with-pages>`_ with GitHub Pages, you need to put the "
"domain of your site (e.g., ``blog.example.com``) inside a ``CNAME`` file "
"at the root of your site. To do this, create the ``content/extra/`` "
"directory and add a ``CNAME`` file to it. Then use the ``STATIC_PATHS`` "
"setting to tell Pelican to copy this file to your output directory. For "
"example::"
msgstr ""

#: ../../tips.rst:236
msgid "Note: use forward slashes, ``/``, even on Windows."
msgstr ""

#: ../../tips.rst:238
msgid ""
"You can also use the ``EXTRA_PATH_METADATA`` mechanism to place a "
"``favicon.ico`` or ``robots.txt`` at the root of any site."
msgstr ""

#: ../../tips.rst:242
msgid "How to add YouTube or Vimeo Videos"
msgstr ""

#: ../../tips.rst:244
msgid ""
"The easiest way is to paste the embed code of the video from these sites "
"directly into your source content."
msgstr ""

#: ../../tips.rst:247
msgid ""
"Alternatively, you can also use Pelican plugins like ``liquid_tags``, "
"``pelican_youtube``, or ``pelican_vimeo`` to embed videos in your "
"content."
msgstr ""

#: ../../tips.rst:250
msgid ""
"Moreover, markup languages like reST and Markdown have plugins that let "
"you embed videos in the markup. You can use `reST video directive "
"<https://gist.github.com/dbrgn/2922648>`_ for reST or `mdx_video plugin "
"<https://github.com/italomaia/mdx-video>`_ for Markdown."
msgstr ""

#: ../../tips.rst:257
msgid "Develop Locally Using SSL"
msgstr ""

#: ../../tips.rst:259
msgid "Here's how you can set up your local pelican server to support SSL."
msgstr ""

#: ../../tips.rst:261
msgid ""
"First, create a self-signed certificate and key using ``openssl`` (this "
"creates ``cert.pem`` and ``key.pem``)::"
msgstr ""

#: ../../tips.rst:265
msgid ""
"And use this command to launch the server (the server starts within your "
"``output`` directory)::"
msgstr ""

#: ../../tips.rst:269
msgid "If you are using ``develop-server.sh``,  add this to the top::"
msgstr ""

#: ../../tips.rst:274
msgid "and modify the ``pelican.server`` line as follows::"
msgstr ""

#~ msgid "Publishing to GitHub"
#~ msgstr ""

#~ msgid ""
#~ "`GitHub Pages "
#~ "<https://help.github.com/categories/20/articles>`_ offer "
#~ "an easy and convenient way to "
#~ "publish Pelican sites. There are `two"
#~ " types of GitHub Pages "
#~ "<https://help.github.com/articles/user-organization-"
#~ "and-project-pages>`_: *Project Pages* and"
#~ " *User Pages*. Pelican sites can be"
#~ " published as both Project Pages and"
#~ " User Pages."
#~ msgstr ""

#~ msgid "Project Pages"
#~ msgstr ""

#~ msgid "User Pages"
#~ msgstr ""
